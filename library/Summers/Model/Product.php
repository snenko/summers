<?php

/**
 * Summers_Model_Product
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Summers_Model_Product extends Summers_Model_BaseProduct
{

    protected $_product_collection=array();

    /**
     * @param array $product_collection
     */
    public function setProductCollection($product_collection)
    {
        $this->_product_collection = $product_collection;
    }

    /**
     * @return array
     */
    public function getProductCollection()
    {
        return $this->_product_collection;
    }


    //----------------------------------------------------------

    public function setUp()
    {
        $this->hasMany(
            'Summers_Model_SubProductGallery', array(
                                          'local'   => 'productid',
                                          'foreign' => 'productid'
                                     )
        );
    }

    public function deleteProduct($productid)
    {
        if (!$productid) {
            return false;
        }

        $pictures_for_delete = Summers_Model_Product::getPictures($productid);
        $query = Doctrine_Query::create()
            ->delete('Summers_Model_Product i')
            ->whereIn('i.productid', $productid);

        try {
            //видалити звязки продукт-галерея
            Summers_Model_SubProductGallery::deleteGalleries_By_ProductId($productid);

            //видалити запис продукта з бд
            $query->execute();

            //видалити фотки
            if ($pictures_for_delete) {
                //список каталогів звідки видаляються фотки
                $dirs[] = Zend_Registry::get('config')->uploads->galleryPhotoDir;
                $dirs[] = Zend_Registry::get('config')->upload_thumbnails->dir;
                $dirs[] = Zend_Registry::get('config')->upload_md->dir;

                Summers_Snenko::deletePictures($pictures_for_delete, $dirs);
            }
            return true;

        } catch (Exception $e) {
            return false;
        }

    }

    public function getProduct($productid)
    {
        $q = Doctrine_Query::create()
            ->from('Summers_Model_Product p')
            ->where('p.productid = ?', $productid);

        $recs = $this->deployPicturesToArray($q->fetchArray());

        return $recs;
    }

    public function getProducts($galleryid=null, $limit=null)
    {
        $q = Doctrine_Query::create()
            ->select('p.*')
            ->from('Summers_Model_Product p');

        if ($galleryid) {
            $q->leftJoin('Summers_Model_SubProductGallery s')
                ->where('s.galleryid = ?', $galleryid);
        }

        if ($limit) {
            $q->limit($limit);
        }

        $res = $this->deployPicturesToArray($q->fetchArray(), true);

        return $res;
    }

    //public function setProductAdapterForm($form)
//    public static function setProductAdapterForm($values, $adapter)
//    {
////        $values = $form->getValues();
////        $adapter = $form->pictures->getTransferAdapter();
//        $galleryDir = '/../public/photos'; //Zend_Registry::get('config')->uploads->galleryPhotoDir;
//
//        return Summers_Model_Product::setProduct($values, $adapter, $galleryDir);
//    }

    /**
     * вибираємо назви зображення, що відмічені в сітці для видалення (2=>'gf.jpg', 3=>'fd.jpg', 5=>'sd.jpg')
     * @param $photos
     * @param $checkpictures
     *
     * @return array
     */
    public static function getChekedPicture_ForDelete($photos, $checkpictures)
    {
        if (!$photos || !$checkpictures) {
            return array();
        }

        $for_del = array();

        function getElemArray($value_ch, $photos)
        {
            if (($value_ch != 0 && !$value_ch) || !$photos) {
                return false;
            }

            foreach ($photos as $key_pic => $value_pic) {
                if ($value_ch == $key_pic) {
                    return $value_pic;
                }
            }
            return false;
        }

        //ch(0=>'2', 1=>'4')
        //foreach ($checkpictures as $key_ch => $value_ch) {
        foreach ($checkpictures as $value_ch) {
            $for_del[$value_ch] = getElemArray($value_ch, $photos);
        }

        return $for_del;
    }

    /**
     * set Product
     *
     * @param $values
     * @param $adapter
     * @param $galleryDir
     *
     * @return int
     * @throws Zend_Controller_Action_Exception
     */
    public static function setProduct($values, $adapter, $galleryDir)
    {
        //Шляхи до допоміжних зображень
        $dirs[] = Zend_Registry::get('config')->upload_thumbnails->dir;
        $dirs[] = Zend_Registry::get('config')->upload_md->dir;

        //обробка зображень
        $productPictures = new ProductPictures(
            $galleryDir,
            array(
                 'productid'     => $values['productid'],
                 'checkpictures' => $values['checkpictures'],
                 'adapter'       => $adapter,
            ),
            $dirs
        );
        //Видаляю помічені до видалення зображення
        $productPictures->deleteProductPictures();

        //визначає чи редагування чи збереження
        $item = ($values['productid']) ?
            Doctrine::getTable('Summers_Model_Product')->find($values['productid'])
            : (new Summers_Model_Product());

        //збереження в бд
        $item->fromArray(
            array(
                 'name'        => $values['name'],
                 'description' => $values['description'],
                 'meta'        => $values['meta'],
                 'pictures'    => $productPictures->getPicturesString(),
            )
        );
        $item->save();

        //продукт не збережено
        if (!$item->productid) {
            throw new Zend_Controller_Action_Exception("I don't save galleries in Product;");
            //return false;
        }

        //зберігаємо обрані галереї
        $isErrorGalleries = Summers_Model_SubProductGallery::setGalleries($item->productid, $values['galleries']);
        if (!$isErrorGalleries) {
            throw new Zend_Controller_Action_Exception("I don't save galleries in Product;");
        }

//        try {
//        } catch (Zend_File_Transfer_Exception $e) {
//            throw new Zend_Controller_Action_Exception('File could not be renamed. An error occured while processing the file.');
//        }
        return $item->productid;
    }

    /**
     * deploy several pictures string of file names to one array of file names
     *
     * @param array() $recs
     * @param bool    $showOnlyFirstPicture : get just one picture for one product
     *
     * @return mixed
     */
    public static function deployPicturesToArray($recs, $showOnlyFirstPicture = false)
    {
        if (count($recs) > 0) {
            for ($i = 0; $i < count($recs); $i++) {
                $res = Summers_Snenko::getArray($recs[$i]['pictures']);
                if ($showOnlyFirstPicture) {
                    $res = array($res[0]);
                }

                $recs[$i]['pictures'] = $res;
            }
        }
        return $recs;
    }

    /**
     * Збереження доданих зображень
     * @param $adapter
     * @param $galleryDir
     *
     * @return array
     */
    static function saveProductFromAdapter($adapter, $galleryDir)
    {
        $result = array();

        /** @var Zend_File_Transfer $adapter */
        for ($i = 0; $i < count($adapter->getFileInfo()); $i++) {
            //Zend_Registry::get('config')->uploads->galleryPhotoDir
            $adapter_label = 'pictures_' . $i . '_';

            if ($adapter->getfileinfo()[$adapter_label]['name']) {
                $old_fn = $adapter->getFileName($adapter_label);
                $gen = Summers_Snenko::getNewFileName($galleryDir);
                $new_fn = "{$gen}." . pathinfo($old_fn, PATHINFO_EXTENSION);

                $adapter->clearFilters();
                $result[] = Summers_Snenko::SaveFileWithRandomName($adapter, $new_fn, $adapter_label);
            }
        }
        return $result;
    }

    /**
     * get pictures from product
     * @param      $productid
     * @param bool $justOnePic
     *
     * @return array|bool
     */
    static function getPictures($productid, $justOnePic=false)
    {
        if (!$productid) {
            return false;
        }

        $q1 = Doctrine_Query::create()
            ->select('p.pictures')
            ->from('Summers_Model_Product p')
            ->where('p.productid = ?', $productid);

        $q = $q1->fetchArray();

        $res = array();

        if (count($q)) {
            if ($q[0]['pictures']) {
                $res = Summers_Snenko::getArray($q[0]['pictures']);
            }
        }

        if ($justOnePic && count($res)) {
            $res = $res[0];
        }

        return $res;

    }

    /**
     * Отримати колекцію продуктів
     * @param null $galleryid
     *
     * @return array
     */
    public static function getProducts_ByGalleries($galleryid=null)
    {
        //вибірка товарів
        $q = Doctrine_Query::create()
            ->select('p.*')
            ->from('Summers_Model_Product p')
            ->orderBy('p.name');

        if($galleryid){
            $q->leftJoin('p.Summers_Model_SubProductGallery pg')
                ->addWhere('pg.galleryid = ?', $galleryid);
        }

        $recs = $q->fetchArray();

        //вибірка галерей
        $all_galleries = Summers_Model_Gallery::getGalleries_toArray();
        $products = array();

        //Вибірка шляхів
        $dir = Zend_Registry::get('config')->thumbnails->dir;
        //$galleryDir = Zend_Registry::get('config')->uploads->galleryPhotoDir;

        foreach($recs as $rec)
        {
            // добавити перелік галерей
            $galleries = Summers_Model_SubProductGallery::
                getGalleriesFromProduct($rec['productid'], $all_galleries);

            // Фото товару
            $picture = Summers_Model_Product::getPictures($rec['productid'], true);
            if(!$picture){
                $picture = 'no-photo.png';
            }

            // заносимо данні в основний масив
            $products[] = array(
                'productid'   => $rec['productid'],
                'name'        => $rec['name'],
                'meta'        => $rec['meta'],
                'description' => $rec['description'],
                'picture'     => "{$dir}/{$picture}",
                'galleries'   => $galleries,
            );

        }
        return $products;
    }

    //список продуктів
    public function getListProducts($limit=null)
    {
        $products = $this->getProducts(null,10);

        $_p=array();
        foreach($products as $k=>$p){
            $_p[$k] = $p;
            $_p[$k]['pictures'] = $p['pictures'][0];
        }

        return $_p;

    }
}

/**
 * Клас для обробки зображень продуктів
 * Class ProductPictures
 */
class ProductPictures
{
    private $productid = '';
    private $pictures_added = array();
    private $pictures_not_del = array();
    private $pictures_db = array();
    private $checkpictures = array();

    private $_dirs =array();

    public $pictures_string = '';
    public $pictures_for_del = array();

    /**
     * масив зображень до видалення
     * @return array
     */
    public function getPicturesForDel()
    {
        return $this->pictures_for_del;
    }

    /**
     * @param array $dirs
     */
    public function setDirs($dirs)
    {
        if (isset($dirs)) {
            $this->_dirs = $dirs;
        }
    }

    /**
     * @return array
     */
    public function getDirs()
    {
        return $this->_dirs;
    }
    //--- Процедури ------------------------------

    /**
     * Рядок зображень
     * @return string
     */
    public function getPicturesString()
    {
        return $this->pictures_string;
    }

    /**
     * обєднуємо обидва масиви і переводимо в строку, для збереження в БД
     * @param array $pictures_string
     */
    function setPicturesString($pictures_string = array())
    {
        if ($pictures_string) {
            $this->pictures_string = $pictures_string;
        } else {
            //обєднуємо обидва масиви і переводимо в строку, для збереження в БД
            $this->pictures_string = implode(",", array_merge($this->pictures_added, $this->pictures_not_del));
        }
    }

    /**
     * отримати фото, що залишились після видалення(не помічені галочками)
     * @param array $pictures_not_del
     */
    function setPicturesNotDel($pictures_not_del = array())
    {
        if ($pictures_not_del) {
            $this->pictures_not_del = $pictures_not_del;
        } else {
            $this->pictures_not_del = array_diff($this->pictures_db, $this->pictures_for_del);
        }
    }

    /**
     * список фото у бд
     * @param array $pictures_db
     */
    function setPicturesDb($pictures_db = array())
    {
        if ($pictures_db) {
            $this->pictures_db = $pictures_db;
        } else {
            $this->pictures_db = Summers_Model_Product::getPictures($this->productid);
        }
    }

    /**
     * фото для видалення(помічені галочками)
     * @param array $pictures_for_del
     */
    function setPicturesForDel($pictures_for_del = array())
    {
        if ($pictures_for_del) {
            $this->pictures_for_del = $pictures_for_del;
        } else {
            $this->pictures_for_del = Summers_Model_Product::getChekedPicture_ForDelete(
                $this->pictures_db,
                $this->checkpictures
            );
        }
    }

    /**
     * дістати зображення із upload
     * @param array $pictures_added
     */
    function setPicturesAdded($pictures_added = array())
    {
        if ($pictures_added) {
            $this->pictures_added = $pictures_added;
        } else {
            $this->pictures_added = Summers_Model_Product::saveProductFromAdapter($this->adapter, $this->galleryDir);
        }
    }

    /**
     * $galleryDir, array(productid, checkpictures, adapter)
     * @param       $galleryDir
     * @param array $values
     * @param array $dirs
     */
    function __construct($galleryDir, array $values, $dirs=array())
    {
        $this->setDirs($dirs);

        if (isset($galleryDir)) {
            $this->galleryDir = $galleryDir;
        }

        if (isset($values['productid'])) {
            $this->productid = $values['productid'];
        }

        if (isset($values['checkpictures'])) {
            $this->checkpictures = $values['checkpictures'];
        }

        if (isset($values['adapter'])) {
            $this->adapter = $values['adapter'];
        }

        $this->process();
    }

    /**
     * проробка всіх можливих процесів
     * start process
     */
    function process()
    {
        //дістати зображення із upload
        $this->setPicturesAdded();

        //якщо запис редагується
        if ($this->productid) {
            //список фото у бд
            $this->setPicturesDb();

            //фото для видалення(помічені галочками)
            $this->setPicturesForDel();

            //отримати фото, що залишились після видалення(не помічені галочками)
            $this->setPicturesNotDel();
        }
        //обєднуємо обидва масиви і переводимо в строку, для збереження в БД
        $this->setPicturesString();
    }

    /**
     * Видалити виделені зображення
     * delete selected pictures
     *
     * @param array $files
     */
    public function deleteProductPictures($files = array())
    {
        if (!$files) {
            $files = $this->getPicturesForDel();
        }

        $dirs = $this->getDirs();
        $dirs[] = $this->galleryDir;

        foreach($dirs as $dir)
        {
            foreach ($files as $key => $value) {
                $file = "{$dir}/{$value}";

                if (file_exists($file)) {
                    unlink($file);
                }
            }
        }
    }
}
