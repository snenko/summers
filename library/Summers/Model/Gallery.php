<?php

/**
 * Summers_Model_Gallery
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 *
 * @package    ##PACKAGE##
 * @subpackage ##SUBPACKAGE##
 * @author     ##NAME## <##EMAIL##>
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
class Summers_Model_Gallery extends Summers_Model_BaseGallery
{
    protected  $_adapter;

    protected $_files_for_delete;


    /**
     * Добавляємо файл для видалення
     *
     * @param array $file_for_delete
     */
    public function setFilesForDelete($files_for_delete)
    {
        if(!$files_for_delete) return;

        if(!is_array($files_for_delete))
            $files_for_delete = array($files_for_delete);

        $this->_files_for_delete = $files_for_delete;
    }

    /**
     * @return array
     */
    public function getFilesForDelete()
    {
        return $this->_files_for_delete;
    }

    /**
     * @param null $adapter
     */
    public function setAdapter($adapter)
    {
        $this->_adapter = $adapter;
    }

    /**
     * @return null
     */
    public function getAdapter()
    {
        return $this->_adapter;
    }

    public function setUp()
    {
        $this->hasMany(
            'Summers_Model_SubProductGallery', array(
                                          'local'   => 'galleryid',
                                          'foreign' => 'galleryid'
                                     )
        );
    }

    /**
     * Отримуємо масив галерей в форматі: array( 'galleryid' => array(field1, field2,..) )
     * @return array
     */
    public static function getGalleries_toArray(){
        $galleries = (new Summers_Model_Gallery())->getGallerys();

        $res = array();
        foreach($galleries as $gallery) {
            $res[ $gallery['galleryid'] ] = $gallery;
        }

        return $res;
    }

    /**
     * get gallery by ID
     *
     * @param $id
     *
     * @return array
     */
    public function getGallery($id)
    {
        $q = Doctrine_Query::create()
            ->from('Summers_Model_Gallery g')
            ->where('g.galleryid = ?', $id);
        return $q->fetchArray();
    }

    /**
     * get array of gallerys
     *
     * @return array
     */
    public function getGallerys()
    {
        $q = Doctrine_Query::create()
            ->from('Summers_Model_Gallery g');
        return $q->fetchArray();
    }

    /**
     * get key/value array to multiOptions
     *
     * @return array : (galleryid/galleryname)
     */
    public static function getGalleriesToMultiOptions()
    {
        $q = Doctrine_Query::create()
            ->select('galleryid, galleryname')
            ->from('Summers_Model_Gallery g');
        $gall = $q->fetchArray();

        $res = array();
        if (count($gall)) {
            foreach ($gall as $row) {
                $res[$row['galleryid']] = $row['galleryname'];
            }
        }

        return $res;
    }

    /**
     * Set Gallery and redirect picture for this gallery
     *
     * @param $values
     * @param $pic_adapter
     *
     * @throws Zend_Controller_Action_Exception
     */
    public function setGalleryAdapterForm($form)
    {
        $values = $form->getValues();
        $pic_adapter = $form->picture->getTransferAdapter();

        return $this->setGallery($values, $pic_adapter);
    }

    public function save(Doctrine_Connection $conn = null)
    {
        if($this->getAdapter()) {
            $new_fn = Summers_Snenko::SaveFileWithRandomName(
                $this->getAdapter(),
                Summers_Snenko::getNewFileName().".".pathinfo($this->picture, PATHINFO_EXTENSION),
                $this->picture);

            if (!$new_fn) {
                $this->getErrorStack()->add('picture', 'general');
                return;
                //throw new Zend_Controller_Action_Exception("Picture is not be saved.");
            }
            $this->picture = $new_fn;
        }

        parent::save($conn);

        // якщо немає помилок при збереженні: видаляємо зображення, що було до оновлення
        if($files_for_delete = $this->getFilesForDelete()) {
            if (!$this->getErrorStack()->toArray()) {
                foreach($files_for_delete as $file)
                    Summers_Snenko::deletePictures($file);
            }
        }
    }

    public function setGallery($values, $adapter)
    {
        $item = ($values['galleryid'])
            ? Doctrine::getTable('Summers_Model_Gallery')->find($values['galleryid'])
            : $this;

        $item->setAdapter($adapter);

        $item->fromArray(
            array(
                 'galleryname' => $values['galleryname'],
                 'description' => $values['description'],
                 'meta'        => $values['meta'])
        );
        $item->save();



        $id = $item->galleryid;

        return $id;
//        try {
//        } catch (Zend_File_Transfer_Exception $e) {
//            throw new Zend_Controller_Action_Exception('File could not be renamed. An error occured while processing the file.');
//        }
    }

    public static  function getGalleriesByProductToArray($productid)
    {
        $q = Doctrine_Query::create()
            ->select('galleryid')
            ->from('Summers_Model_SubProductGallery s')
            ->where('productid = ?', $productid);

        $gall = $q->fetchArray();

        $res = array();
        foreach($gall as $row) {
            $res[] = $row['galleryid'];
        }

        return $res;
    }

    /**
     * delete gallery
     *
     * @param $id
     */
    public function deleteGallery($id)
    {
        $gall = $this->getGallery($id);

        $q = Doctrine_Query::create()
            ->delete('Summers_Model_Gallery i')
            ->whereIn('i.galleryid', $id);

        $dirs[] = Zend_Registry::get('config')->uploads->galleryPhotoDir;
        $dirs[] = Zend_Registry::get('config')->upload_thumbnails->dir;
        $dirs[] = Zend_Registry::get('config')->upload_md->dir;

        if ($gall['picture']) {
            //Якщо зображення видалено, то
            $g = Summers_Snenko::deletePictures(array($gall['picture']), $dirs);
            if (!$g) {
                return false;
            }
        }


            if ($q->execute()) {
                return true;
            }

        return true;
//        foreach (glob("{$path}/gallery_{$id}*") as $file) {
//            unlink($file);
//        }

    }
}